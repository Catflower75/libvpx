name: Prebuild libvpx (VS2019 v142, x86-windows-static, /MT)

on:
  workflow_dispatch:

jobs:
  libvpx-x86:
    runs-on: windows-2022
    env:
      VCPKG_PLATFORM_TOOLSET: v142
      TRIPLET: x86-windows-static
      ARTIFACT_DIR: artifacts/x86-windows-static
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure v142 toolset (install if missing)
        shell: pwsh
        run: |
          $vsInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $hasV142 = & $vswhere -products * -requires Microsoft.VisualStudio.Component.VC.v142.x86.x64 -property installationPath
          if (-not $hasV142) {
            Write-Host "Installing VS2019 v142 toolset..."
            $vsPath = & $vswhere -products * -latest -property installationPath
            & $vsInstaller modify --installPath "$vsPath" --add Microsoft.VisualStudio.Component.VC.v142.x86.x64 --quiet --norestart --nocache
            if ($LASTEXITCODE -ne 0) { throw "Failed to install v142 toolset." }
          }
          "v142 toolset available."

      - name: Clone vcpkg
        run: git clone --depth 1 https://github.com/microsoft/vcpkg.git

      - name: Bootstrap vcpkg
        run: .\vcpkg\bootstrap-vcpkg.bat -disableMetrics

      - name: Install libvpx (static /MT)
        run: .\vcpkg\vcpkg.exe install libvpx:%TRIPLET% --clean-after-build

      - name: Show vcpkg state
        shell: pwsh
        run: |
          .\vcpkg\vcpkg.exe list
          Write-Host "Installed dirs:"
          Get-ChildItem -Recurse -Directory .\vcpkg\installed | Select-Object FullName

      - name: Collect library
        shell: pwsh
        run: |
          $vcpkgRoot = Resolve-Path ".\vcpkg"
          $libDir = Join-Path $vcpkgRoot "installed\$env:TRIPLET\lib"
          $dbgDir = Join-Path $vcpkgRoot "installed\$env:TRIPLET\debug\lib"
          if (!(Test-Path $libDir) -and !(Test-Path $dbgDir)) {
            throw "vcpkg lib folder not found. Checked:`n$libDir`n$dbgDir"
          }
          New-Item -ItemType Directory -Force -Path $env:ARTIFACT_DIR | Out-Null
          $srcDir = (Test-Path $libDir) ? $libDir : $dbgDir
          $lib = Get-ChildItem -Filter "vpx*.lib" $srcDir | Select-Object -First 1
          if (-not $lib) { throw "vpx*.lib not found in $srcDir" }
          Copy-Item $lib.FullName (Join-Path $env:ARTIFACT_DIR "vpx.lib") -Force
          Copy-Item $lib.FullName (Join-Path $env:ARTIFACT_DIR "vpxmt.lib") -Force

      - name: Locate dumpbin (optional)
        shell: pwsh
        run: |
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $vsPath = & $vswhere -products * -latest -property installationPath
          if ($vsPath) {
            $patterns = @(
              Join-Path $vsPath "VC\Tools\MSVC\*\bin\Hostx64\x86\dumpbin.exe"
              Join-Path $vsPath "VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
              Join-Path $vsPath "VC\Tools\MSVC\*\bin\Hostx86\x86\dumpbin.exe"
            )
            $dumpbin = Get-ChildItem -Path $patterns -ErrorAction SilentlyContinue | Sort-Object FullName -Descending | Select-Object -First 1
            if ($dumpbin) {
              "DUMPBIN=$($dumpbin.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
              Write-Host "Found dumpbin at $($dumpbin.FullName)"
            } else {
              "NO_DUMPBIN=1" | Out-File -FilePath $env:GITHUB_ENV -Append
              Write-Warning "dumpbin.exe not found; CRT verification will be skipped."
            }
          } else {
            "NO_DUMPBIN=1" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Warning "vswhere did not return a VS installation; CRT verification will be skipped."
          }

      - name: Verify static CRT (/MT) if dumpbin is available
        shell: pwsh
        continue-on-error: true
        run: |
          $libPath = Join-Path $env:ARTIFACT_DIR "vpx.lib"
          if (!(Test-Path $libPath)) {
            Write-Warning "Release lib not present; skipping CRT verification."
            exit 0
          }
          if ($env:NO_DUMPBIN -eq "1" -or -not (Test-Path $env:DUMPBIN)) {
            Write-Warning "dumpbin not available; skipping CRT verification."
            exit 0
          }
          $out = & "$env:DUMPBIN" /directives "$libPath"
          $out | Out-File -FilePath (Join-Path $env:ARTIFACT_DIR "dumpbin-directives.txt") -Encoding ascii
          $hasLibcmt = $out | Select-String -Pattern '\bLIBCMT\b' -Quiet
          if ($hasLibcmt) {
            Write-Host "Verified: static CRT (LIBCMT) detected."
          } else {
            Write-Warning "Could not confirm LIBCMT in directives; check dumpbin-directives.txt manually."
          }

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: libvpx-v142-x86-windows-static
          path: ${{ env.ARTIFACT_DIR }}/*
