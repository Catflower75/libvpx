name: Build libvpx (VS2019 v142 static /MT)

on:
  workflow_dispatch:

jobs:
  build:
    name: build (${{ matrix.platform }}, ${{ matrix.target }})
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: Win32
            target: x86-win32-vs16
          - platform: x64
            target: x86_64-win64-vs16

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show installed Visual Studio instances
        shell: pwsh
        run: |
          & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -all -products * -format json | ConvertFrom-Json | `
            ForEach-Object { "$($_.displayName) $($_.catalog.productDisplayVersion) [$($_.installationPath)]" }

      - name: Ensure v142 toolset (install if missing)
        shell: pwsh
        run: |
          $vsInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"

          # Get a VS2022 installation path to modify
          $vsInstallPath = & $vswhere -products * -latest -property installationPath
          if (-not $vsInstallPath) {
            throw "No Visual Studio installation found to modify."
          }

          # Check if v142 component exists
          $hasV142 = & $vswhere -products * -requires Microsoft.VisualStudio.Component.VC.v142.x86.x64 -property installationPath
          if (-not $hasV142) {
            Write-Host "VS2019 v142 toolset not found. Installing component Microsoft.VisualStudio.Component.VC.v142.x86.x64..."
            & $vsInstaller modify `
              --installPath "$vsInstallPath" `
              --add Microsoft.VisualStudio.Component.VC.v142.x86.x64 `
              --quiet --norestart --nocache
            if ($LASTEXITCODE -ne 0) {
              throw "Failed to install v142 toolset."
            }
          } else {
            Write-Host "VS2019 v142 toolset already present."
          }

          # Verify again
          $verify = & $vswhere -products * -requires Microsoft.VisualStudio.Component.VC.v142.x86.x64 -property installationPath
          if (-not $verify) { throw "v142 toolset verification failed after install." }
          Write-Host "Verified: v142 toolset available at: $verify"

      - name: Install NASM (assembler)
        run: choco install nasm -y

      - name: Configure libvpx (static /MT)
        shell: bash
        run: |
          set -e
          ./configure --target=${{ matrix.target }} \
                      --disable-shared \
                      --enable-static \
                      --enable-static-msvcrt \
                      --disable-examples \
                      --disable-docs \
                      --disable-tools

      - name: Build with MSBuild (force v142)
        run: msbuild build\msvs\libvpx.sln /m /p:Configuration=Release /p:Platform=${{ matrix.platform }} /p:PlatformToolset=v142

      - name: Collect artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path artifacts\${{ matrix.platform }} -Force | Out-Null
          $lib = Get-ChildItem -Recurse -Filter vpx*.lib | Select-Object -First 1
          if (-not $lib) { throw "vpx .lib not found" }
          Copy-Item $lib.FullName "artifacts\${{ matrix.platform }}\vpx.lib"
          Copy-Item $lib.FullName "artifacts\${{ matrix.platform }}\vpxmt.lib"

      - name: Verify static CRT (/MT)
        shell: pwsh
        run: |
          $out = & dumpbin /directives "artifacts\${{ matrix.platform }}\vpx.lib"
          if ($out -notmatch "LIBCMT") { Write-Host $out; throw "Library is not linked with static CRT (LIBCMT)."; }
          "Verified: static CRT (LIBCMT) detected."

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libvpx-v142-${{ matrix.platform }}
          path: artifacts/${{ matrix.platform }}/*
